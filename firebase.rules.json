{
  "rules": {
    ".read": false,
    ".write": false,

    "render_state": {
      ".read": true,
      ".write": "auth != null && auth.token.firebase.sign_in_provider === 'anonymous' && root.child('screens/approved').child(auth.uid).val() == true",
      ".validate": "newData.hasChildren(['phase'])",
      "phase": {
        ".validate": "newData.isString() && newData.val().matches(/^(visible|hidden|showing|hiding|error)$/)"
      },
      "updatedAt": { ".validate": "newData.isNumber() || !newData.exists()" },
      "nowShowing": {
        ".validate": "!newData.exists() || (newData.hasChildren(['name','question']) && newData.child('name').isString() && newData.child('question').isString() && (!newData.child('uid').exists() || newData.child('uid').isString()) && (!newData.child('participantId').exists() || newData.child('participantId').isString()))",
        "uid": { ".validate": "newData.isString()" },
        "participantId": { ".validate": "newData.isString()" }
      }
    },

    "currentTelop": {
      ".read": true,
      ".write": "auth != null && root.child('admins').child(auth.uid).val() == true"
    },

    "questions": {
      ".read": "auth != null",
      "$uid": {
        ".write": "(auth != null && (root.child('admins').child(auth.uid).val() == true || auth.token.admin == true)) || (auth == null && !data.exists() && newData.child('uid').isString() && newData.child('uid').val() == $uid && newData.child('token').isString() && newData.child('token').val().length > 0 && root.child('questionIntake/tokens').child(newData.child('token').val()).exists() && root.child('questionIntake/tokens').child(newData.child('token').val()).child('revoked').val() != true && (!root.child('questionIntake/tokens').child(newData.child('token').val()).child('expiresAt').exists() || root.child('questionIntake/tokens').child(newData.child('token').val()).child('expiresAt').val() >= now) && newData.child('participantId').isString() && newData.child('participantId').val() == root.child('questionIntake/tokens').child(newData.child('token').val()).child('participantId').val() && (!newData.child('eventId').exists() || newData.child('eventId').val() == root.child('questionIntake/tokens').child(newData.child('token').val()).child('eventId').val()) && (!newData.child('scheduleId').exists() || newData.child('scheduleId').val() == root.child('questionIntake/tokens').child(newData.child('token').val()).child('scheduleId').val()) && newData.child('answered').isBoolean() && newData.child('answered').val() == false && newData.child('selecting').isBoolean() && newData.child('selecting').val() == false && newData.child('type').isString() && newData.child('type').val() == 'normal')",
        ".validate": "newData.hasChildren(['uid','name','question'])",
        "uid":       { ".validate": "newData.isString()" },
        "token":     { ".validate": "newData.isString() || !newData.exists()" },
        "name":      { ".validate": "newData.isString()" },
        "question":  { ".validate": "newData.isString()" },
        "group":     { ".validate": "newData.isString() || !newData.exists()" },
        "genre":     { ".validate": "newData.isString() || !newData.exists()" },
        "schedule":  { ".validate": "newData.isString() || !newData.exists()" },
        "scheduleStart": { ".validate": "newData.isString() || !newData.exists()" },
        "scheduleEnd":   { ".validate": "newData.isString() || !newData.exists()" },
        "eventId":   { ".validate": "newData.isString() || !newData.exists()" },
        "scheduleId":{ ".validate": "newData.isString() || !newData.exists()" },
        "ts":        { ".validate": "newData.isNumber() || !newData.exists()" },
        "participantId": { ".validate": "newData.isString() || !newData.exists()" },
        "answered":  { ".validate": "newData.isBoolean() || !newData.exists()" },
        "selecting": { ".validate": "newData.isBoolean() || !newData.exists()" },
        "updatedAt": { ".validate": "newData.isNumber()  || !newData.exists()" },
        "type":      { ".validate": "newData.isString() || !newData.exists()" },
        "questionLength": { ".validate": "newData.isNumber() || !newData.exists()" },
        "$other":    { ".validate": false }
      }
    },

    "dictionary": {
      ".read": true,
      ".write": "auth != null && root.child('admins').child(auth.uid).val() == true"
    },

    "questionIntake": {
      ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
      ".write": "auth != null && root.child('admins').child(auth.uid).val() == true",
      "events": {
        ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
        "$eventId": {
          ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
          ".write": "auth != null && root.child('admins').child(auth.uid).val() == true",
          ".validate": "!newData.exists() || (newData.hasChildren(['name']) && newData.child('name').isString())",
          "name": { ".validate": "newData.isString()" },
          "createdAt": { ".validate": "newData.isNumber() || newData.val() == now || !newData.exists()" },
          "updatedAt": { ".validate": "newData.isNumber() || newData.val() == now || !newData.exists()" },
          "$other": { ".validate": false }
        }
      },
      "schedules": {
        ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
        "$eventId": {
          ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
          "$scheduleId": {
            ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
            ".write": "auth != null && root.child('admins').child(auth.uid).val() == true",
            ".validate": "!newData.exists() || (newData.hasChildren(['label']) && newData.child('label').isString())",
            "label": { ".validate": "newData.isString()" },
            "date": { ".validate": "newData.isString() || !newData.exists()" },
            "startAt": { ".validate": "newData.isString() || !newData.exists()" },
            "endAt": { ".validate": "newData.isString() || !newData.exists()" },
            "participantCount": { ".validate": "newData.isNumber() || !newData.exists()" },
            "createdAt": { ".validate": "newData.isNumber() || newData.val() == now || !newData.exists()" },
            "updatedAt": { ".validate": "newData.isNumber() || newData.val() == now || !newData.exists()" },
            "$other": { ".validate": false }
          }
        }
      },
      "participants": {
        ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
        "$eventId": {
          ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
          "$scheduleId": {
            ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
            "$participantId": {
              ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
              ".write": "auth != null && root.child('admins').child(auth.uid).val() == true",
              ".validate": "!newData.exists() || (newData.hasChildren(['participantId','name','groupNumber','token']) && newData.child('participantId').isString() && newData.child('name').isString() && newData.child('groupNumber').isString() && newData.child('token').isString())",
              "participantId": { ".validate": "newData.isString()" },
              "name": { ".validate": "newData.isString()" },
              "groupNumber": { ".validate": "newData.isString()" },
              "teamNumber": { ".validate": "newData.isString() || !newData.exists()" },
              "token": { ".validate": "newData.isString()" },
              "guidance": { ".validate": "newData.isString() || !newData.exists()" },
              "phonetic": { ".validate": "newData.isString() || !newData.exists()" },
              "furigana": { ".validate": "newData.isString() || !newData.exists()" },
              "gender": { ".validate": "newData.isString() || !newData.exists()" },
              "department": { ".validate": "newData.isString() || !newData.exists()" },
              "phone": { ".validate": "newData.isString() || !newData.exists()" },
              "email": { ".validate": "newData.isString() || !newData.exists()" },
              "updatedAt": { ".validate": "newData.isNumber() || newData.val() == now || !newData.exists()" },
              "$other": { ".validate": false }
            }
          }
        }
      },
      "tokens": {
        "$token": {
          ".read": true,
          ".write": "auth != null && root.child('admins').child(auth.uid).val() == true",
          ".validate": "!newData.exists() || (newData.hasChildren(['eventId','scheduleId','participantId','displayName','groupNumber']) && newData.child('eventId').isString() && newData.child('scheduleId').isString() && newData.child('participantId').isString() && newData.child('displayName').isString() && newData.child('groupNumber').isString())",
          "eventId": { ".validate": "newData.isString()" },
          "eventName": { ".validate": "newData.isString() || !newData.exists()" },
          "scheduleId": { ".validate": "newData.isString()" },
          "scheduleLabel": { ".validate": "newData.isString() || !newData.exists()" },
          "scheduleDate": { ".validate": "newData.isString() || !newData.exists()" },
          "scheduleStart": { ".validate": "newData.isString() || !newData.exists()" },
          "scheduleEnd": { ".validate": "newData.isString() || !newData.exists()" },
          "participantId": { ".validate": "newData.isString()" },
          "displayName": { ".validate": "newData.isString()" },
          "groupNumber": { ".validate": "newData.isString()" },
          "teamNumber": { ".validate": "newData.isString() || !newData.exists()" },
          "guidance": { ".validate": "newData.isString() || !newData.exists()" },
          "expiresAt": { ".validate": "newData.isNumber() || !newData.exists()" },
          "updatedAt": { ".validate": "newData.isNumber() || newData.val() == now || !newData.exists()" },
          "createdAt": { ".validate": "newData.isNumber() || newData.val() == now || !newData.exists()" },
          "revoked": { ".validate": "newData.isBoolean() || !newData.exists()" },
          "$other": { ".validate": false }
        }
      },
      "submissions": {
        "$token": {
          ".read": false,
          ".write": "(auth == null && root.child('questionIntake/tokens').child($token).exists() && root.child('questionIntake/tokens').child($token).child('revoked').val() != true && (!root.child('questionIntake/tokens').child($token).child('expiresAt').exists() || root.child('questionIntake/tokens').child($token).child('expiresAt').val() >= now)) || (auth != null && (root.child('admins').child(auth.uid).val() == true || auth.token.admin == true))",
          "$submissionId": {
          ".validate": "(!newData.exists() && auth != null && (root.child('admins').child(auth.uid).val() == true || auth.token.admin == true)) || (!data.exists() && newData.hasChildren(['radioName','question','questionLength','genre','eventId','scheduleId','participantId','formVersion','submittedAt']) && newData.child('radioName').isString() && newData.child('radioName').val().length > 0 && newData.child('question').isString() && newData.child('question').val().length > 0 && newData.child('questionLength').isNumber() && newData.child('questionLength').val() > 0 && newData.child('genre').isString() && newData.child('eventId').isString() && newData.child('eventId').val() == root.child('questionIntake/tokens').child($token).child('eventId').val() && newData.child('scheduleId').isString() && newData.child('scheduleId').val() == root.child('questionIntake/tokens').child($token).child('scheduleId').val() && newData.child('participantId').isString() && newData.child('participantId').val() == root.child('questionIntake/tokens').child($token).child('participantId').val() && newData.child('formVersion').isString() && (newData.child('submittedAt').isNumber() || newData.child('submittedAt').val() == now) && (!newData.child('groupNumber').exists() || newData.child('groupNumber').isString()) && (!newData.child('scheduleLabel').exists() || newData.child('scheduleLabel').isString()) && (!newData.child('scheduleDate').exists() || newData.child('scheduleDate').isString()) && (!newData.child('scheduleStart').exists() || newData.child('scheduleStart').isString()) && (!newData.child('scheduleEnd').exists() || newData.child('scheduleEnd').isString()) && (!newData.child('eventName').exists() || newData.child('eventName').isString()) && (!newData.child('participantName').exists() || newData.child('participantName').isString()) && (!newData.child('guidance').exists() || newData.child('guidance').isString()) && (!newData.child('language').exists() || newData.child('language').isString()) && (!newData.child('userAgent').exists() || newData.child('userAgent').isString()) && (!newData.child('referrer').exists() || newData.child('referrer').isString()) && (!newData.child('origin').exists() || newData.child('origin').isString()) && (!newData.child('clientTimestamp').exists() || newData.child('clientTimestamp').isNumber()) && (!newData.child('status').exists() || (newData.child('status').isString() && newData.child('status').val() == 'pending')) && (!newData.child('token').exists() || newData.child('token').val() == $token) && (!newData.child('uid').exists() || newData.child('uid').isString())))"
          }
        }
      },
      "submissionErrors": {
        ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
        ".write": "auth != null && root.child('admins').child(auth.uid).val() == true"
      }
    },

    "update_trigger": {
      ".read": true,
      ".write": "auth != null"
    },

    "admins": {
      ".read": false,
      ".write": "auth != null && root.child('admins').child(auth.uid).val() == true"
    },

    "render_control": {
      ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
      ".write": false
    },

    "screens": {
      "approved": {
        "$uid": {
          ".read": "auth != null && auth.token.firebase.sign_in_provider === 'anonymous' && auth.uid === $uid",
          ".write": false
        }
      },
      "sessions": {
        "$uid": {
          ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
          ".write": false
        }
      }
    }
  }
}
