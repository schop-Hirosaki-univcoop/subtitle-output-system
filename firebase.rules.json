{
  "rules": {
    ".read": false,
    ".write": false,

    "render": {
      "state": {
        ".read": true,
        ".write": "auth != null && ((auth.token.firebase.sign_in_provider === 'anonymous' && root.child('screens/approved').child(auth.uid).val() == true) || root.child('admins').child(auth.uid).val() == true || auth.token.admin == true)",
        ".validate": "newData.hasChildren(['phase'])",
        "phase": {
          ".validate": "newData.isString() && newData.val().matches(/^(visible|hidden|showing|hiding|error)$/)"
        },
        "updatedAt": { ".validate": "newData.isNumber() || !newData.exists()" },
        "nowShowing": {
          ".validate": "!newData.exists() || (newData.hasChildren(['name','question']) && newData.child('name').isString() && newData.child('question').isString() && (!newData.child('uid').exists() || newData.child('uid').isString()) && (!newData.child('participantId').exists() || newData.child('participantId').isString()) && (!newData.child('genre').exists() || newData.child('genre').isString()) && (!newData.child('pickup').exists() || newData.child('pickup').isBoolean()))",
          "uid": { ".validate": "newData.isString()" },
          "participantId": { ".validate": "newData.isString()" },
          "genre": { ".validate": "newData.isString()" },
          "pickup": { ".validate": "newData.isBoolean()" }
        }
      },
      "session": {
        ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
        ".write": "auth != null && auth.token.admin == true"
      }
    },

    "operatorChat": {
      ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
      ".write": "auth != null && root.child('admins').child(auth.uid).val() == true",
      "messages": {
        ".indexOn": ["timestamp"],
        "$messageId": {
          ".validate": "newData.hasChildren(['uid','message','timestamp']) && newData.child('uid').isString() && newData.child('message').isString() && newData.child('message').val().length > 0 && newData.child('message').val().length <= 1000 && (newData.child('timestamp').isNumber() || newData.child('timestamp').val() == now)",
          "uid": { ".validate": "newData.isString()" },
          "displayName": { ".validate": "newData.isString() || !newData.exists()" },
          "email": { ".validate": "newData.isString() || !newData.exists()" },
          "message": { ".validate": "newData.isString()" },
          "timestamp": { ".validate": "newData.isNumber() || newData.val() == now" },
          "replyTo": {
            ".validate": "!newData.exists() || (newData.hasChildren(['id','message']) && newData.child('id').isString() && newData.child('id').val().length > 0 && newData.child('message').isString() && newData.child('message').val().length > 0 && newData.child('message').val().length <= 300 && (!newData.child('author').exists() || newData.child('author').isString()))",
            "id": { ".validate": "newData.isString()" },
            "author": { ".validate": "newData.isString() || !newData.exists()" },
            "message": { ".validate": "newData.isString()" },
            "$other": { ".validate": false }
          },
          "$other": { ".validate": false }
        }
      }
    },

    "questions": {
      ".read": "auth != null",
      "normal": {
        "$uid": {
          ".write": "(auth != null && (root.child('admins').child(auth.uid).val() == true || auth.token.admin == true)) || (auth == null && !data.exists() && newData.child('uid').isString() && newData.child('uid').val() == $uid && newData.child('token').isString() && newData.child('token').val().length > 0 && root.child('questionIntake/tokens').child(newData.child('token').val()).exists() && root.child('questionIntake/tokens').child(newData.child('token').val()).child('revoked').val() != true && (!root.child('questionIntake/tokens').child(newData.child('token').val()).child('expiresAt').exists() || root.child('questionIntake/tokens').child(newData.child('token').val()).child('expiresAt').val() >= now) && newData.child('participantId').isString() && newData.child('participantId').val() == root.child('questionIntake/tokens').child(newData.child('token').val()).child('participantId').val() && (!newData.child('eventId').exists() || newData.child('eventId').val() == root.child('questionIntake/tokens').child(newData.child('token').val()).child('eventId').val()) && (!newData.child('scheduleId').exists() || newData.child('scheduleId').val() == root.child('questionIntake/tokens').child(newData.child('token').val()).child('scheduleId').val()) && newData.child('type').isString() && newData.child('type').val() == 'normal')",
          ".validate": "newData.hasChildren(['uid','name','question'])",
          "uid":       { ".validate": "newData.isString()" },
          "token":     { ".validate": "newData.isString() || !newData.exists()" },
          "name":      { ".validate": "newData.isString()" },
          "question":  { ".validate": "newData.isString()" },
          "group":     { ".validate": "newData.isString() || !newData.exists()" },
          "genre":     { ".validate": "newData.isString() || !newData.exists()" },
          "schedule":  { ".validate": "newData.isString() || !newData.exists()" },
          "scheduleStart": { ".validate": "newData.isString() || !newData.exists()" },
          "scheduleEnd":   { ".validate": "newData.isString() || !newData.exists()" },
          "scheduleDate":  { ".validate": "newData.isString() || !newData.exists()" },
          "participantId": { ".validate": "newData.isString() || !newData.exists()" },
          "participantName": { ".validate": "newData.isString() || !newData.exists()" },
          "guidance": { ".validate": "newData.isString() || !newData.exists()" },
          "eventId":   { ".validate": "newData.isString() || !newData.exists()" },
          "eventName": { ".validate": "newData.isString() || !newData.exists()" },
          "scheduleId":{ ".validate": "newData.isString() || !newData.exists()" },
          "ts":        { ".validate": "newData.isNumber() || !newData.exists()" },
          "updatedAt": { ".validate": "newData.isNumber()  || !newData.exists()" },
          "type":      { ".validate": "newData.isString() || !newData.exists()" },
          "questionLength": { ".validate": "newData.isNumber() || !newData.exists()" },
          "$other":    { ".validate": false }
        }
      },
      "pickup": {
        "$uid": {
          ".write": "auth != null && (root.child('admins').child(auth.uid).val() == true || auth.token.admin == true)",
          ".validate": "newData.hasChildren(['uid','name','question'])"
        }
      }
    },

    "questionStatus": {
      ".read": "auth != null",
      "$uid": {
        ".write": "(auth != null && (root.child('admins').child(auth.uid).val() == true || auth.token.admin == true)) || (auth == null && !data.exists() && newData.hasChildren(['answered','selecting']) && newData.child('answered').isBoolean() && newData.child('answered').val() == false && newData.child('selecting').isBoolean() && newData.child('selecting').val() == false && (!newData.child('updatedAt').exists() || newData.child('updatedAt').isNumber()) && root.child('questions/normal').child($uid).exists())",
        "answered": { ".validate": "newData.isBoolean() || !newData.exists()" },
        "selecting": { ".validate": "newData.isBoolean() || !newData.exists()" },
        "updatedAt": { ".validate": "newData.isNumber() || !newData.exists()" },
        "$other": { ".validate": false }
      }
    },

    "dictionary": {
      ".read": true,
      ".write": "auth != null && root.child('admins').child(auth.uid).val() == true"
    },

    "questionIntake": {
      ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
      ".write": "auth != null && root.child('admins').child(auth.uid).val() == true",
      "events": {
        ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
        "$eventId": {
          ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
          ".write": "auth != null && root.child('admins').child(auth.uid).val() == true",
          ".validate": "!newData.exists() || (newData.hasChildren(['name']) && newData.child('name').isString())",
          "name": { ".validate": "newData.isString()" },
          "createdAt": { ".validate": "newData.isNumber() || newData.val() == now || !newData.exists()" },
          "updatedAt": { ".validate": "newData.isNumber() || newData.val() == now || !newData.exists()" },
          "$other": { ".validate": false }
        }
      },
      "schedules": {
        ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
        "$eventId": {
          ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
          "$scheduleId": {
            ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
            ".write": "auth != null && root.child('admins').child(auth.uid).val() == true",
            ".validate": "!newData.exists() || (newData.hasChildren(['label']) && newData.child('label').isString())",
            "label": { ".validate": "newData.isString()" },
            "date": { ".validate": "newData.isString() || !newData.exists()" },
            "startAt": { ".validate": "newData.isString() || !newData.exists()" },
            "endAt": { ".validate": "newData.isString() || !newData.exists()" },
            "participantCount": { ".validate": "newData.isNumber() || !newData.exists()" },
            "createdAt": { ".validate": "newData.isNumber() || newData.val() == now || !newData.exists()" },
            "updatedAt": { ".validate": "newData.isNumber() || newData.val() == now || !newData.exists()" },
            "$other": { ".validate": false }
          }
        }
      },
      "participants": {
        ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
        "$eventId": {
          ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
          "$scheduleId": {
            ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
            "$participantId": {
              ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
              ".write": "auth != null && root.child('admins').child(auth.uid).val() == true",
              ".validate": "!newData.exists() || (newData.hasChildren(['participantId','name','groupNumber','token']) && newData.child('participantId').isString() && newData.child('name').isString() && newData.child('groupNumber').isString() && newData.child('token').isString())",
              "participantId": { ".validate": "newData.isString()" },
              "uid": { ".validate": "newData.isString() || !newData.exists()" },
              "legacyParticipantId": { ".validate": "newData.isString() || !newData.exists()" },
              "name": { ".validate": "newData.isString()" },
              "phonetic": { ".validate": "newData.isString() || !newData.exists()" },
              "furigana": { ".validate": "newData.isString() || !newData.exists()" },
              "gender": { ".validate": "newData.isString() || !newData.exists()" },
              "department": { ".validate": "newData.isString() || !newData.exists()" },
              "phone": { ".validate": "newData.isString() || !newData.exists()" },
              "email": { ".validate": "newData.isString() || !newData.exists()" },
              "groupNumber": { ".validate": "newData.isString()" },
              "teamNumber": { ".validate": "newData.isString() || !newData.exists()" },
              "token": { ".validate": "newData.isString()" },
              "guidance": { ".validate": "newData.isString() || !newData.exists()" },
              "status": { ".validate": "newData.isString() || !newData.exists()" },
              "isCancelled": { ".validate": "newData.isBoolean() || !newData.exists()" },
              "isRelocated": { ".validate": "newData.isBoolean() || !newData.exists()" },
              "relocationSourceScheduleId": { ".validate": "newData.isString() || !newData.exists()" },
              "relocationSourceScheduleLabel": { ".validate": "newData.isString() || !newData.exists()" },
              "relocationDestinationScheduleId": { ".validate": "newData.isString() || !newData.exists()" },
              "relocationDestinationScheduleLabel": { ".validate": "newData.isString() || !newData.exists()" },
              "relocationDestinationTeamNumber": { ".validate": "newData.isString() || !newData.exists()" },
              "updatedAt": { ".validate": "newData.isNumber() || newData.val() == now || !newData.exists()" },
              "$other": { ".validate": false }
            }
          }
        }
      },
      "tokens": {
        "$token": {
          ".read": true,
          ".write": "auth != null && root.child('admins').child(auth.uid).val() == true",
          ".validate": "!newData.exists() || (newData.hasChildren(['eventId','scheduleId','participantId','displayName','groupNumber']) && newData.child('eventId').isString() && newData.child('scheduleId').isString() && newData.child('participantId').isString() && newData.child('displayName').isString() && newData.child('groupNumber').isString())",
          "eventId": { ".validate": "newData.isString()" },
          "eventName": { ".validate": "newData.isString() || !newData.exists()" },
          "scheduleId": { ".validate": "newData.isString()" },
          "scheduleLabel": { ".validate": "newData.isString() || !newData.exists()" },
          "scheduleDate": { ".validate": "newData.isString() || !newData.exists()" },
          "scheduleStart": { ".validate": "newData.isString() || !newData.exists()" },
          "scheduleEnd": { ".validate": "newData.isString() || !newData.exists()" },
          "participantId": { ".validate": "newData.isString()" },
          "participantUid": { ".validate": "newData.isString() || !newData.exists()" },
          "displayName": { ".validate": "newData.isString()" },
          "groupNumber": { ".validate": "newData.isString()" },
          "teamNumber": { ".validate": "newData.isString() || !newData.exists()" },
          "guidance": { ".validate": "newData.isString() || !newData.exists()" },
          "expiresAt": { ".validate": "newData.isNumber() || !newData.exists()" },
          "updatedAt": { ".validate": "newData.isNumber() || newData.val() == now || !newData.exists()" },
          "createdAt": { ".validate": "newData.isNumber() || newData.val() == now || !newData.exists()" },
          "revoked": { ".validate": "newData.isBoolean() || !newData.exists()" },
          "$other": { ".validate": false }
        }
      },
      "submissions": {
        "$token": {
          ".read": false,
          ".write": "(auth == null && root.child('questionIntake/tokens').child($token).exists() && root.child('questionIntake/tokens').child($token).child('revoked').val() != true && (!root.child('questionIntake/tokens').child($token).child('expiresAt').exists() || root.child('questionIntake/tokens').child($token).child('expiresAt').val() >= now)) || (auth != null && (root.child('admins').child(auth.uid).val() == true || auth.token.admin == true))",
          "$submissionId": {
            ".validate": "(!newData.exists() && auth != null && (root.child('admins').child(auth.uid).val() == true || auth.token.admin == true)) || (!data.exists() && newData.hasChildren(['radioName','question','questionLength','genre','eventId','scheduleId','participantId','formVersion','submittedAt']))",
            "radioName": { ".validate": "(!newData.exists() && auth != null && (root.child('admins').child(auth.uid).val() == true || auth.token.admin == true)) || (!data.exists() && newData.isString() && newData.val().length > 0)" },
            "question": { ".validate": "(!newData.exists() && auth != null && (root.child('admins').child(auth.uid).val() == true || auth.token.admin == true)) || (!data.exists() && newData.isString() && newData.val().length > 0)" },
            "questionLength": { ".validate": "(!newData.exists() && auth != null && (root.child('admins').child(auth.uid).val() == true || auth.token.admin == true)) || (!data.exists() && newData.isNumber() && newData.val() > 0)" },
            "genre": { ".validate": "(!newData.exists() && auth != null && (root.child('admins').child(auth.uid).val() == true || auth.token.admin == true)) || (!data.exists() && newData.isString() && newData.val().length > 0)" },
            "eventId": { ".validate": "(!newData.exists() && auth != null && (root.child('admins').child(auth.uid).val() == true || auth.token.admin == true)) || (!data.exists() && newData.isString() && newData.val() == root.child('questionIntake/tokens').child($token).child('eventId').val())" },
            "scheduleId": { ".validate": "(!newData.exists() && auth != null && (root.child('admins').child(auth.uid).val() == true || auth.token.admin == true)) || (!data.exists() && newData.isString() && newData.val() == root.child('questionIntake/tokens').child($token).child('scheduleId').val())" },
            "participantId": { ".validate": "(!newData.exists() && auth != null && (root.child('admins').child(auth.uid).val() == true || auth.token.admin == true)) || (!data.exists() && newData.isString() && newData.val() == root.child('questionIntake/tokens').child($token).child('participantId').val())" },
            "formVersion": { ".validate": "(!newData.exists() && auth != null && (root.child('admins').child(auth.uid).val() == true || auth.token.admin == true)) || (!data.exists() && newData.isString())" },
            "submittedAt": { ".validate": "(!newData.exists() && auth != null && (root.child('admins').child(auth.uid).val() == true || auth.token.admin == true)) || (!data.exists() && (newData.isNumber() || newData.val() == now))" },
            "groupNumber": { ".validate": "newData.isString() || !newData.exists()" },
            "scheduleLabel": { ".validate": "newData.isString() || !newData.exists()" },
            "scheduleDate": { ".validate": "newData.isString() || !newData.exists()" },
            "scheduleStart": { ".validate": "newData.isString() || !newData.exists()" },
            "scheduleEnd": { ".validate": "newData.isString() || !newData.exists()" },
            "eventName": { ".validate": "newData.isString() || !newData.exists()" },
            "participantName": { ".validate": "newData.isString() || !newData.exists()" },
            "guidance": { ".validate": "newData.isString() || !newData.exists()" },
            "language": { ".validate": "newData.isString() || !newData.exists()" },
            "userAgent": { ".validate": "newData.isString() || !newData.exists()" },
            "referrer": { ".validate": "newData.isString() || !newData.exists()" },
            "origin": { ".validate": "newData.isString() || !newData.exists()" },
            "clientTimestamp": { ".validate": "newData.isNumber() || !newData.exists()" },
            "status": { ".validate": "(!newData.exists() && auth != null && (root.child('admins').child(auth.uid).val() == true || auth.token.admin == true)) || (!data.exists() && newData.isString() && newData.val() == 'pending')" },
            "token": { ".validate": "(!newData.exists() && auth != null && (root.child('admins').child(auth.uid).val() == true || auth.token.admin == true)) || (!data.exists() && (!newData.exists() || newData.val() == $token))" },
            "uid": { ".validate": "(!newData.exists() && auth != null && (root.child('admins').child(auth.uid).val() == true || auth.token.admin == true)) || (!data.exists() && newData.isString())" },
            "$other": { ".validate": false }
          }
        }
      },
      "submissionErrors": {
        ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
        ".write": "auth != null && root.child('admins').child(auth.uid).val() == true"
      }
    },

    "signals": {
      ".read": true,
      "$signal": {
        ".write": "auth != null"
      }
    },

    "admins": {
      ".read": false,
      ".write": "auth != null && root.child('admins').child(auth.uid).val() == true"
    },

    "screens": {
      "approved": {
        "$uid": {
          ".read": "auth != null && auth.token.firebase.sign_in_provider === 'anonymous' && auth.uid === $uid",
          ".write": false
        }
      },
      "sessions": {
        "$uid": {
          ".read": "auth != null && root.child('admins').child(auth.uid).val() == true",
          ".write": false
        }
      }
    }
  }
}
